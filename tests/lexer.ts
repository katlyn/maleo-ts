import t from "tap"

import { lexer } from "../src"
import { Lexeme } from "../src/lexer"

function getLex (program: string) {
  return Array.from(lexer(program))
}

t.test("Identifiers and Keywords", async t => {
  t.strictSame(getLex("a"), [{ lexeme: "a", category: Lexeme.ID }], "letter")
  t.strictSame(getLex(" a"), [{ lexeme: "a", category: Lexeme.ID }], "space + letter")
  t.strictSame(getLex("_"), [{ lexeme: "_", category: Lexeme.ID }], "underscore")
  t.strictSame(getLex(" _"), [{ lexeme: "_", category: Lexeme.ID }], "space + underscore")
  t.strictSame(getLex("bx"), [{ lexeme: "bx", category: Lexeme.ID }], "letter + letter")
  t.strictSame(getLex("b3"), [{ lexeme: "b3", category: Lexeme.ID }], "letter + digit")
  t.strictSame(getLex("_n"), [{ lexeme: "_n", category: Lexeme.ID }], "underscore + letter")
  t.strictSame(getLex("_4"), [{ lexeme: "_4", category: Lexeme.ID }], "underscore + digit")
  t.strictSame(getLex("abc_39xyz"), [{ lexeme: "abc_39xyz", category: Lexeme.ID }], "medium-length identifier")
  t.strictSame(getLex("abc cr_3"), [{ lexeme: "abc", category: Lexeme.ID }, { lexeme: "cr_3", category: Lexeme.ID }], "Identifier + Identifier")
  t.strictSame(getLex("a  "), [{ lexeme: "a", category: Lexeme.ID }], "single letter + space")
  t.strictSame(getLex("a--"), [{ lexeme: "a", category: Lexeme.ID }], "single letter + comment")
  t.strictSame(getLex("a#!"), [{ lexeme: "a", category: Lexeme.ID }], "single letter + comment")
  t.strictSame(getLex("a --"), [{ lexeme: "a", category: Lexeme.ID }], "single letter + space + comment")
  t.strictSame(getLex("a #!"), [{ lexeme: "a", category: Lexeme.ID }], "single letter + space + comment")
  t.strictSame(getLex(" a"), [{ lexeme: "a", category: Lexeme.ID }], "space + letter")
  t.strictSame(getLex("--\na"), [{ lexeme: "a", category: Lexeme.ID }], "comment + letter")
  t.strictSame(getLex("#!\na"), [{ lexeme: "a", category: Lexeme.ID }], "comment + letter")
  t.strictSame(getLex("--\n a"), [{ lexeme: "a", category: Lexeme.ID }], "comment + space + letter")
  t.strictSame(getLex("#!\n a"), [{ lexeme: "a", category: Lexeme.ID }], "comment + space + letter")
  t.strictSame(getLex("ab"), [{ lexeme: "ab", category: Lexeme.ID }], "two letters")

  t.strictSame(getLex("#"), [{ lexeme: "#", category: Lexeme.PUNCTUATION }], "NOT comment (#)")
  t.strictSame(getLex("//"), [{ lexeme: "/", category: Lexeme.OP }, { lexeme: "/", category: Lexeme.OP }], "NOT comment (//)")
  t.strictSame(getLex("/*"), [{ lexeme: "/", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "NOT comment (/*)")

  t.strictSame(getLex("and"), [{ lexeme: "and", category: Lexeme.KEY }], "keyword: and")
  t.strictSame(getLex("char"), [{ lexeme: "char", category: Lexeme.KEY }], "keyword: char")
  t.strictSame(getLex("cr"), [{ lexeme: "cr", category: Lexeme.KEY }], "keyword: cr")
  t.strictSame(getLex("do"), [{ lexeme: "do", category: Lexeme.KEY }], "keyword: do")
  t.strictSame(getLex("else"), [{ lexeme: "else", category: Lexeme.KEY }], "keyword: else")
  t.strictSame(getLex("elseif"), [{ lexeme: "elseif", category: Lexeme.KEY }], "keyword: elseif")
  t.strictSame(getLex("end"), [{ lexeme: "end", category: Lexeme.KEY }], "keyword: end")
  t.strictSame(getLex("false"), [{ lexeme: "false", category: Lexeme.KEY }], "keyword: false")
  t.strictSame(getLex("function"), [{ lexeme: "function", category: Lexeme.KEY }], "keyword: function")
  t.strictSame(getLex("if"), [{ lexeme: "if", category: Lexeme.KEY }], "keyword: if")
  t.strictSame(getLex("not"), [{ lexeme: "not", category: Lexeme.KEY }], "keyword: not")
  t.strictSame(getLex("or"), [{ lexeme: "or", category: Lexeme.KEY }], "keyword: or")
  t.strictSame(getLex("rand"), [{ lexeme: "rand", category: Lexeme.KEY }], "keyword: rand")
  t.strictSame(getLex("read"), [{ lexeme: "read", category: Lexeme.KEY }], "keyword: read")
  t.strictSame(getLex("return"), [{ lexeme: "return", category: Lexeme.KEY }], "keyword: return")
  t.strictSame(getLex("then"), [{ lexeme: "then", category: Lexeme.KEY }], "keyword: then")
  t.strictSame(getLex("true"), [{ lexeme: "true", category: Lexeme.KEY }], "keyword: true")
  t.strictSame(getLex("while"), [{ lexeme: "while", category: Lexeme.KEY }], "keyword: while")
  t.strictSame(getLex("write"), [{ lexeme: "write", category: Lexeme.KEY }], "keyword: write")

  t.strictSame(getLex("nott"), [{ lexeme: "nott", category: Lexeme.ID }], "keyword+letter")
  t.strictSame(getLex("end2"), [{ lexeme: "end2", category: Lexeme.ID }], "keyword+digit")
  t.strictSame(getLex("elsE"), [{ lexeme: "elsE", category: Lexeme.ID }], "keyword -> 1 letter UC")
  t.strictSame(getLex("AND"), [{ lexeme: "AND", category: Lexeme.ID }], "keyword -> all UC")
  t.strictSame(getLex("els eif"), [{ lexeme: "els", category: Lexeme.ID }, { lexeme: "eif", category: Lexeme.ID }], "split keyword #1")
  t.strictSame(getLex("elsei"), [{ lexeme: "elsei", category: Lexeme.ID }], "partial keyword")
  t.strictSame(getLex("tr--\nue"), [{ lexeme: "tr", category: Lexeme.ID }, { lexeme: "ue", category: Lexeme.ID }], "split keyword #2")
  t.strictSame(getLex("fal2se"), [{ lexeme: "fal2se", category: Lexeme.ID }], "split keyword #3")
  t.strictSame(getLex("wri_te"), [{ lexeme: "wri_te", category: Lexeme.ID }], "split keyword #4")
  t.strictSame(getLex("_read"), [{ lexeme: "_read", category: Lexeme.ID }], "_ + keyword")
  t.strictSame(getLex("elif"), [{ lexeme: "elif", category: Lexeme.ID }], "NOT keyword: elif")
  t.strictSame(getLex("elsif"), [{ lexeme: "elsif", category: Lexeme.ID }], "NOT keyword: elsif")
  t.strictSame(getLex("begin"), [{ lexeme: "begin", category: Lexeme.ID }], "NOT keyword: begin")
  t.strictSame(getLex("def"), [{ lexeme: "def", category: Lexeme.ID }], "NOT keyword: def")
  t.strictSame(getLex("dq"), [{ lexeme: "dq", category: Lexeme.ID }], "NOT keyword: dq")
  t.strictSame(getLex("func"), [{ lexeme: "func", category: Lexeme.ID }], "NOT keyword: func")
  t.strictSame(getLex("input"), [{ lexeme: "input", category: Lexeme.ID }], "NOT keyword: input")
  t.strictSame(getLex("print"), [{ lexeme: "print", category: Lexeme.ID }], "NOT keyword: print")
  t.strictSame(getLex("readnum"), [{ lexeme: "readnum", category: Lexeme.ID }], "NOT keyword: readnum")
  t.strictSame(getLex("sq"), [{ lexeme: "sq", category: Lexeme.ID }], "NOT keyword: sq")

  t.strictSame(getLex("break"), [{ lexeme: "break", category: Lexeme.ID }], "Lua keyword: break")
  t.strictSame(getLex("for"), [{ lexeme: "for", category: Lexeme.ID }], "Lua keyword: for")
  t.strictSame(getLex("goto"), [{ lexeme: "goto", category: Lexeme.ID }], "Lua keyword: goto")
  t.strictSame(getLex("in"), [{ lexeme: "in", category: Lexeme.ID }], "Lua keyword: in")
  t.strictSame(getLex("local"), [{ lexeme: "local", category: Lexeme.ID }], "Lua keyword: local")
  t.strictSame(getLex("nil"), [{ lexeme: "nil", category: Lexeme.ID }], "Lua keyword: nil")
  t.strictSame(getLex("repeat"), [{ lexeme: "repeat", category: Lexeme.ID }], "Lua keyword: repeat")
  t.strictSame(getLex("until"), [{ lexeme: "until", category: Lexeme.ID }], "Lua keyword: until")

  const longId = "z".repeat(20000)
  t.strictSame(getLex(longId), [{ lexeme: longId, category: Lexeme.ID }], "long id")
})


t.test("Numeric Literals", async t => {
  t.strictSame(getLex("3"), [{ lexeme: "3", category: Lexeme.NUMERIC_LITERAL }], "single digit")
  t.strictSame(getLex("3a"), [{ lexeme: "3", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "a", category: Lexeme.ID }], "single digit then letter")
  t.strictSame(getLex("123456"), [{ lexeme: "123456", category: Lexeme.NUMERIC_LITERAL }], "num, no dot")
  t.strictSame(getLex(".123456"), [{ lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "123456", category: Lexeme.NUMERIC_LITERAL }], "num, dot @ start")
  t.strictSame(getLex("123456."), [{ lexeme: "123456", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }], "num, dot @ end")
  t.strictSame(getLex("123.456"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "456", category: Lexeme.NUMERIC_LITERAL }], "num, dot in middle")
  t.strictSame(getLex("1.2.3"), [{ lexeme: "1", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "2", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "3", category: Lexeme.NUMERIC_LITERAL }], "num, 2 dots")
  t.strictSame(getLex("+123456"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "123456", category: Lexeme.NUMERIC_LITERAL }], "+num, no dot")
  t.strictSame(getLex("+.123456"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "123456", category: Lexeme.NUMERIC_LITERAL }], "+num, dot @ start")
  t.strictSame(getLex("+123456."), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "123456", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }], "+num, dot @ end")
  t.strictSame(getLex("+123.456"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "456", category: Lexeme.NUMERIC_LITERAL }], "+num, dot in middle")
  t.strictSame(getLex("+1.2.3"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "2", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "3", category: Lexeme.NUMERIC_LITERAL }], "+num, 2 dots")
  t.strictSame(getLex("-123456"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "123456", category: Lexeme.NUMERIC_LITERAL }], "-num, no dot")
  t.strictSame(getLex("-.123456"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "123456", category: Lexeme.NUMERIC_LITERAL }], "-num, dot @ start")
  t.strictSame(getLex("-123456."), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "123456", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }], "-num, dot @ end")
  t.strictSame(getLex("-123.456"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "456", category: Lexeme.NUMERIC_LITERAL }], "-num, dot in middle")
  t.strictSame(getLex("-1.2.3"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "2", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "3", category: Lexeme.NUMERIC_LITERAL }], "-num, 2 dots")
  t.strictSame(getLex("++123456"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "+", category: Lexeme.OP }, { lexeme: "123456", category: Lexeme.NUMERIC_LITERAL }], "++num, no dot")
  t.strictSame(getLex("++123456"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "+", category: Lexeme.OP }, { lexeme: "123456", category: Lexeme.NUMERIC_LITERAL }], "++num, dot @ end")

  const longNum = "1".repeat(10000)
  t.strictSame(getLex(longNum), [{ lexeme: longNum, category: Lexeme.NUMERIC_LITERAL }], "very long num #1")
  t.strictSame(getLex(longNum + "+"), [{ lexeme: longNum, category: Lexeme.NUMERIC_LITERAL }, { lexeme: "+", category: Lexeme.OP }], "very long num #2")
  t.strictSame(getLex("123 456"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "456", category: Lexeme.NUMERIC_LITERAL }], "space-seperated nums")

  t.strictSame(getLex("123e456"), [{ lexeme: "123e456", category: Lexeme.NUMERIC_LITERAL }], "num with exp")
  t.strictSame(getLex("123e+456"), [{ lexeme: "123e+456", category: Lexeme.NUMERIC_LITERAL }], "num with +exp")
  t.strictSame(getLex("123e-456"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }, { lexeme: "-", category: Lexeme.OP }, { lexeme: "456", category: Lexeme.NUMERIC_LITERAL }], "num with -exp")
  t.strictSame(getLex("+123e456"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "123e456", category: Lexeme.NUMERIC_LITERAL }], "+num with exp")
  t.strictSame(getLex("+123e+456"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "123e+456", category: Lexeme.NUMERIC_LITERAL }], "+num with +exp")
  t.strictSame(getLex("+123e-456"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }, { lexeme: "-", category: Lexeme.OP }, { lexeme: "456", category: Lexeme.NUMERIC_LITERAL }], "+num with -exp")
  t.strictSame(getLex("-123e456"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "123e456", category: Lexeme.NUMERIC_LITERAL }], "-num with exp")
  t.strictSame(getLex("-123e+456"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "123e+456", category: Lexeme.NUMERIC_LITERAL }], "-num with +exp")
  t.strictSame(getLex("-123e-456"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }, { lexeme: "-", category: Lexeme.OP }, { lexeme: "456", category: Lexeme.NUMERIC_LITERAL }], "-num with -exp")
  t.strictSame(getLex("123E456"), [{ lexeme: "123E456", category: Lexeme.NUMERIC_LITERAL }], "num with Exp")
  t.strictSame(getLex("123E+456"), [{ lexeme: "123E+456", category: Lexeme.NUMERIC_LITERAL }], "num with +Exp")
  t.strictSame(getLex("123E-456"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "E", category: Lexeme.ID }, { lexeme: "-", category: Lexeme.OP }, { lexeme: "456", category: Lexeme.NUMERIC_LITERAL }], "num with -Exp")
  t.strictSame(getLex("+123E456"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "123E456", category: Lexeme.NUMERIC_LITERAL }], "+num with Exp")
  t.strictSame(getLex("+123E+456"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "123E+456", category: Lexeme.NUMERIC_LITERAL }], "+num with +Exp")
  t.strictSame(getLex("+123E-456"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "E", category: Lexeme.ID }, { lexeme: "-", category: Lexeme.OP }, { lexeme: "456", category: Lexeme.NUMERIC_LITERAL }], "+num with -Exp")
  t.strictSame(getLex("-123E456"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "123E456", category: Lexeme.NUMERIC_LITERAL }], "-num with Exp")
  t.strictSame(getLex("-123E+456"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "123E+456", category: Lexeme.NUMERIC_LITERAL }], "-num with +Exp")
  t.strictSame(getLex("-123E-456"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "E", category: Lexeme.ID }, { lexeme: "-", category: Lexeme.OP }, { lexeme: "456", category: Lexeme.NUMERIC_LITERAL }], "-num with -Exp")

  t.strictSame(getLex("1.2e34"), [{ lexeme: "1", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "2e34", category: Lexeme.NUMERIC_LITERAL }], "num with dot, exp")
  t.strictSame(getLex("12e3.4"), [{ lexeme: "12e3", category: Lexeme.NUMERIC_LITERAL }, { lexeme: ".", category: Lexeme.PUNCTUATION }, { lexeme: "4", category: Lexeme.NUMERIC_LITERAL }], "num, exp with dot")

  t.strictSame(getLex("e"), [{ lexeme: "e", category: Lexeme.ID }], "Just e")
  t.strictSame(getLex("E"), [{ lexeme: "E", category: Lexeme.ID }], "Just E")
  t.strictSame(getLex("e3"), [{ lexeme: "e3", category: Lexeme.ID }], "Just e3")
  t.strictSame(getLex("E3"), [{ lexeme: "E3", category: Lexeme.ID }], "Just E3")
  t.strictSame(getLex("e+3"), [{ lexeme: "e", category: Lexeme.ID }, { lexeme: "+", category: Lexeme.OP }, { lexeme: "3", category: Lexeme.NUMERIC_LITERAL }], "e+3")
  t.strictSame(getLex("E+3"), [{ lexeme: "E", category: Lexeme.ID }, { lexeme: "+", category: Lexeme.OP }, { lexeme: "3", category: Lexeme.NUMERIC_LITERAL }], "E+3")

  t.strictSame(getLex("1e3"), [{ lexeme: "1e3", category: Lexeme.NUMERIC_LITERAL }], "1e3")
  t.strictSame(getLex("123e"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }], "num e")
  t.strictSame(getLex("123E"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "E", category: Lexeme.ID }], "num E")
  t.strictSame(getLex("123ee"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "ee", category: Lexeme.ID }], "num ee #1")
  t.strictSame(getLex("123Ee"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "Ee", category: Lexeme.ID }], "num ee #2")
  t.strictSame(getLex("123eE"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "eE", category: Lexeme.ID }], "num ee #3")
  t.strictSame(getLex("123EE"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "EE", category: Lexeme.ID }], "num ee #4")
  t.strictSame(getLex("123ee1"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "ee1", category: Lexeme.ID }], "num ee num #1")
  t.strictSame(getLex("123Ee1"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "Ee1", category: Lexeme.ID }], "num ee num #2")
  t.strictSame(getLex("123eE1"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "eE1", category: Lexeme.ID }], "num ee num #3")
  t.strictSame(getLex("123EE1"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "EE1", category: Lexeme.ID }], "num ee num #4")
  t.strictSame(getLex("123e+"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }, { lexeme: "+", category: Lexeme.OP }], "num e+ #1")
  t.strictSame(getLex("123E+"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "E", category: Lexeme.ID }, { lexeme: "+", category: Lexeme.OP }], "num e+ #2")
  t.strictSame(getLex("123e-"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }, { lexeme: "-", category: Lexeme.OP }], "num e- #1")
  t.strictSame(getLex("123E-"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "E", category: Lexeme.ID }, { lexeme: "-", category: Lexeme.OP }], "num e- #2")
  t.strictSame(getLex("123e+e7"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }, { lexeme: "+", category: Lexeme.OP }, { lexeme: "e7", category: Lexeme.ID }],"num e+e7")
  t.strictSame(getLex("123e-e7"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }, { lexeme: "-", category: Lexeme.OP }, { lexeme: "e7", category: Lexeme.ID }],"num e-e7")
  t.strictSame(getLex("123e7e"), [{ lexeme: "123e7", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }], "num e7e")
  t.strictSame(getLex("123e+7e"), [{ lexeme: "123e+7", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }], "num e+7e")
  t.strictSame(getLex("123e-7e"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }, { lexeme: "-", category: Lexeme.OP }, { lexeme: "7", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }], "num e-7e")
  t.strictSame(getLex("123f7"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "f7", category: Lexeme.ID }], "num f7 #1")
  t.strictSame(getLex("123F7"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "F7", category: Lexeme.ID }], "num f7 #2")

  t.strictSame(getLex("123 e+7"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }, { lexeme: "+", category: Lexeme.OP }, { lexeme: "7", category: Lexeme.NUMERIC_LITERAL }], "space-separated exp #1")
  t.strictSame(getLex("123 e-7"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }, { lexeme: "-", category: Lexeme.OP }, { lexeme: "7", category: Lexeme.NUMERIC_LITERAL }], "space-separated exp #2")
  t.strictSame(getLex("123e1 2"), [{ lexeme: "123e1", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "2", category: Lexeme.NUMERIC_LITERAL }], "space-separated exp #3")
  t.strictSame(getLex("123else"), [{ lexeme: "123", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "else", category: Lexeme.KEY }], "number else")
  t.strictSame(getLex("1e2e3"), [{ lexeme: "1e2", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e3", category: Lexeme.ID }], "number exponent #1")
  t.strictSame(getLex("1e+2e3"), [{ lexeme: "1e+2", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e3", category: Lexeme.ID }], "number exponent #2")
  t.strictSame(getLex("1e-2e3"), [{ lexeme: "1", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "e", category: Lexeme.ID }, { lexeme: "-", category: Lexeme.OP }, { lexeme: "2e3", category: Lexeme.NUMERIC_LITERAL }], "number exponent #3")

  const longNumTwo = "2".repeat(10000)
  t.strictSame(getLex("3e" + longNumTwo), [{ lexeme: "3e" + longNumTwo, category: Lexeme.NUMERIC_LITERAL }], "long exp #1")
  t.strictSame(getLex("3e" + longNumTwo) + "-", [{ lexeme: "3e" + longNumTwo, category: Lexeme.NUMERIC_LITERAL }, { lexeme: "-", category: Lexeme.OP }], "long exp #1")
})

t.test("Operators", async t => {
  t.strictSame(getLex("=="), [{ lexeme: "==", category: Lexeme.OP }], "== alone")
  t.strictSame(getLex("!="), [{ lexeme: "!=", category: Lexeme.OP }], "!= alone")
  t.strictSame(getLex("<"), [{ lexeme: "<", category: Lexeme.OP }], "< alone")
  t.strictSame(getLex("<="), [{ lexeme: "<=", category: Lexeme.OP }], "<= alone")
  t.strictSame(getLex(">"), [{ lexeme: ">", category: Lexeme.OP }], "> alone")
  t.strictSame(getLex(">="), [{ lexeme: ">=", category: Lexeme.OP }], ">= alone")
  t.strictSame(getLex("+"), [{ lexeme: "+", category: Lexeme.OP }], "+ alone")
  t.strictSame(getLex("-"), [{ lexeme: "-", category: Lexeme.OP }], "- alone")
  t.strictSame(getLex("*"), [{ lexeme: "*", category: Lexeme.OP }], "* alone")
  t.strictSame(getLex("/"), [{ lexeme: "/", category: Lexeme.OP }], "/ alone")
  t.strictSame(getLex("%"), [{ lexeme: "%", category: Lexeme.OP }], "% alone")
  t.strictSame(getLex("["), [{ lexeme: "[", category: Lexeme.OP }], "[ alone")
  t.strictSame(getLex("]"), [{ lexeme: "]", category: Lexeme.OP }], "] alone")
  t.strictSame(getLex("="), [{ lexeme: "=", category: Lexeme.OP }], "= alone")

  t.strictSame(getLex("==1"), [{ lexeme: "==", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "== 1")
  t.strictSame(getLex("!=1"), [{ lexeme: "!=", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "!= 1")
  t.strictSame(getLex("<1"), [{ lexeme: "<", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "< 1")
  t.strictSame(getLex("<=1"), [{ lexeme: "<=", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "<= 1")
  t.strictSame(getLex(">1"), [{ lexeme: ">", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "> 1")
  t.strictSame(getLex(">=1"), [{ lexeme: ">=", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], ">= 1")
  t.strictSame(getLex("+1"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "+ 1")
  t.strictSame(getLex("-1"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "- 1")
  t.strictSame(getLex("*1"), [{ lexeme: "*", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "* 1")
  t.strictSame(getLex("/1"), [{ lexeme: "/", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "/ 1")
  t.strictSame(getLex("%1"), [{ lexeme: "%", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "% 1")
  t.strictSame(getLex("[1"), [{ lexeme: "[", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "[ 1")
  t.strictSame(getLex("]1"), [{ lexeme: "]", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "] 1")
  t.strictSame(getLex("=1"), [{ lexeme: "=", category: Lexeme.OP }, { lexeme: "1", category: Lexeme.NUMERIC_LITERAL }], "= 1")

  t.strictSame(getLex("==a"), [{ lexeme: "==", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "== a")
  t.strictSame(getLex("!=a"), [{ lexeme: "!=", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "!= a")
  t.strictSame(getLex("<a"), [{ lexeme: "<", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "< a")
  t.strictSame(getLex("<=a"), [{ lexeme: "<=", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "<= a")
  t.strictSame(getLex(">a"), [{ lexeme: ">", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "> a")
  t.strictSame(getLex(">=a"), [{ lexeme: ">=", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], ">= a")
  t.strictSame(getLex("+a"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "+ a")
  t.strictSame(getLex("-a"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "- a")
  t.strictSame(getLex("*a"), [{ lexeme: "*", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "* a")
  t.strictSame(getLex("/a"), [{ lexeme: "/", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "/ a")
  t.strictSame(getLex("%a"), [{ lexeme: "%", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "% a")
  t.strictSame(getLex("[a"), [{ lexeme: "[", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "[ a")
  t.strictSame(getLex("]a"), [{ lexeme: "]", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "] a")
  t.strictSame(getLex("=a"), [{ lexeme: "=", category: Lexeme.OP }, { lexeme: "a", category: Lexeme.ID }], "= a")

  t.strictSame(getLex("==*"), [{ lexeme: "==", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "== *")
  t.strictSame(getLex("!=*"), [{ lexeme: "!=", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "!= *")
  t.strictSame(getLex("<*"), [{ lexeme: "<", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "< *")
  t.strictSame(getLex("<=*"), [{ lexeme: "<=", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "<= *")
  t.strictSame(getLex(">*"), [{ lexeme: ">", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "> *")
  t.strictSame(getLex(">=*"), [{ lexeme: ">=", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], ">= *")
  t.strictSame(getLex("+*"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "+ *")
  t.strictSame(getLex("-*"), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "- *")
  t.strictSame(getLex("**"), [{ lexeme: "*", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "* *")
  t.strictSame(getLex("/*"), [{ lexeme: "/", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "/ *")
  t.strictSame(getLex("%*"), [{ lexeme: "%", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "% *")
  t.strictSame(getLex("[*"), [{ lexeme: "[", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "[ *")
  t.strictSame(getLex("]*"), [{ lexeme: "]", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "] *")
  t.strictSame(getLex("=*"), [{ lexeme: "=", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "= *")

  t.strictSame(getLex("++"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "+", category: Lexeme.OP }], "NOT operator: ++")
  t.strictSame(getLex("++2"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "+", category: Lexeme.OP }, { lexeme: "2", category: Lexeme.NUMERIC_LITERAL }], "NOT operator: ++ digit")
  t.strictSame(getLex("**"), [{ lexeme: "*", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }], "NOT operator: --")
  t.strictSame(getLex("**2"), [{ lexeme: "*", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }, { lexeme: "2", category: Lexeme.NUMERIC_LITERAL }], "NOT operator: -- digit")
  t.strictSame(getLex("."), [{ lexeme: ".", category: Lexeme.PUNCTUATION }], "NOT operator: .")
  t.strictSame(getLex("+="), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "=", category: Lexeme.OP }], "NOT operator: +=")
  t.strictSame(getLex("+=="), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "==", category: Lexeme.OP }], "NOT operator: +==")
  t.strictSame(getLex("-="), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "=", category: Lexeme.OP }], "NOT operator: -=")
  t.strictSame(getLex("-=="), [{ lexeme: "-", category: Lexeme.OP }, { lexeme: "==", category: Lexeme.OP }], "NOT operator: -==")
  t.strictSame(getLex("*="), [{ lexeme: "*", category: Lexeme.OP }, { lexeme: "=", category: Lexeme.OP }], "NOT operator: *=")
  t.strictSame(getLex("*=="), [{ lexeme: "*", category: Lexeme.OP }, { lexeme: "==", category: Lexeme.OP }], "NOT operator: *==")
  t.strictSame(getLex("/="), [{ lexeme: "/", category: Lexeme.OP }, { lexeme: "=", category: Lexeme.OP }], "NOT operator: *=")
  t.strictSame(getLex("/=="), [{ lexeme: "/", category: Lexeme.OP }, { lexeme: "==", category: Lexeme.OP }], "NOT operator: /==")
  t.strictSame(getLex(":"), [{ lexeme: ":", category: Lexeme.PUNCTUATION }], "NOT operator: :")
  t.strictSame(getLex("&&"), [{ lexeme: "&", category: Lexeme.PUNCTUATION }, { lexeme: "&", category: Lexeme.PUNCTUATION }], "NOT operator: &&")
  t.strictSame(getLex("||"), [{ lexeme: "|", category: Lexeme.PUNCTUATION }, { lexeme: "|", category: Lexeme.PUNCTUATION }], "NOT operator: ||")

  t.strictSame(getLex("!"), [{ lexeme: "!", category: Lexeme.PUNCTUATION }], "NOT operator: !")
  t.strictSame(getLex("."), [{ lexeme: ".", category: Lexeme.PUNCTUATION }], "NOT operator: .")
  t.strictSame(getLex(":"), [{ lexeme: ":", category: Lexeme.PUNCTUATION }], "NOT operator: :")
  t.strictSame(getLex("~"), [{ lexeme: "~", category: Lexeme.PUNCTUATION }], "NOT operator: ~")
  t.strictSame(getLex("~="), [{ lexeme: "~", category: Lexeme.PUNCTUATION }, { lexeme: "=", category: Lexeme.OP }], "NOT operator: ~=")

  t.strictSame(getLex("====="), [{ lexeme: "==", category: Lexeme.OP }, { lexeme: "==", category: Lexeme.OP }, { lexeme: "=", category: Lexeme.OP }], "=====")
  t.strictSame(getLex("=<<=="), [{ lexeme: "=", category: Lexeme.OP }, { lexeme: "<", category: Lexeme.OP }, { lexeme: "<=", category: Lexeme.OP }, { lexeme: "=", category: Lexeme.OP }], "=<<==")
  t.strictSame(getLex("**/ "), [{ lexeme: "*", category: Lexeme.OP }, { lexeme: "*", category: Lexeme.OP }, { lexeme: "/", category: Lexeme.OP }], "**/ ")
  t.strictSame(getLex("= ="), [{ lexeme: "=", category: Lexeme.OP }, { lexeme: "=", category: Lexeme.OP }], "= =")
  t.strictSame(getLex("++2+"), [{ lexeme: "+", category: Lexeme.OP }, { lexeme: "+", category: Lexeme.OP }, { lexeme: "2", category: Lexeme.NUMERIC_LITERAL }, { lexeme: "+", category: Lexeme.OP }], "++2+")

  t.strictSame(getLex("$(),.:;?@\\^`[]~"), [
    { lexeme: "$", category: Lexeme.PUNCTUATION },
    { lexeme: "(", category: Lexeme.PUNCTUATION },
    { lexeme: ")", category: Lexeme.PUNCTUATION },
    { lexeme: ",", category: Lexeme.PUNCTUATION },
    { lexeme: ".", category: Lexeme.PUNCTUATION },
    { lexeme: ":", category: Lexeme.PUNCTUATION },
    { lexeme: ";", category: Lexeme.PUNCTUATION },
    { lexeme: "?", category: Lexeme.PUNCTUATION },
    { lexeme: "@", category: Lexeme.PUNCTUATION },
    { lexeme: "\\", category: Lexeme.PUNCTUATION },
    { lexeme: "^", category: Lexeme.PUNCTUATION },
    { lexeme: "`", category: Lexeme.PUNCTUATION },
    { lexeme: "{", category: Lexeme.PUNCTUATION },
    { lexeme: "}", category: Lexeme.PUNCTUATION },
    { lexeme: "~", category: Lexeme.PUNCTUATION }
  ], "assorted punctuation")
})
